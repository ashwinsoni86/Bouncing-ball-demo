{"version":3,"sources":["main.js"],"names":["para","document","querySelector","count","canvas","ctx","getContext","width","window","innerWidth","height","innerHeight","random","min","max","Math","floor","randomRGB","Shape","x","y","velX","velY","Ball","color","size","exists","beginPath","fillStyle","arc","PI","fill","balls","ball","dx","dy","sqrt","EvilCircle","addEventListener","e","key","lineWidth","strokeStyle","stroke","textContent","length","push","evilcircle","loop","fillRect","draw","update","collisionDetect","checkBounds","requestAnimationFrame"],"mappings":"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","file":"main.24b4b509.js","sourceRoot":"..","sourcesContent":["// set up canvas\r\nconst para = document.querySelector('p');\r\nlet count = 0;\r\nconst canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst width = canvas.width = window.innerWidth;\r\nconst height = canvas.height = window.innerHeight;\r\n\r\n// function to generate random number\r\n\r\nfunction random(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n// function to generate random RGB color value\r\n\r\nfunction randomRGB() {\r\n  return `rgb(${random(0, 255)},${random(0, 255)},${random(0, 255)})`;\r\n}\r\n\r\nclass Shape{\r\n\r\n    constructor(x, y, velX, velY){\r\n        this.x=x;\r\n        this.y=y;\r\n        this.velX=velX;\r\n        this.velY=velY;\r\n    }\r\n}\r\n\r\nclass Ball extends Shape {\r\n\r\n   constructor(x, y, velX, velY, color, size) {\r\n      super(x,y,velX,velY);\r\n      this.color = color;\r\n      this.size = size;\r\n      this.exists= true;\r\n   }\r\n\r\n   draw() {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.color;\r\n      ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n   }\r\n\r\n   update() {\r\n      if ((this.x + this.size) >= width) {\r\n         this.velX = -(this.velX);\r\n      }\r\n\r\n      if ((this.x - this.size) <= 0) {\r\n         this.velX = -(this.velX);\r\n      }\r\n\r\n      if ((this.y + this.size) >= height) {\r\n         this.velY = -(this.velY);\r\n      }\r\n\r\n      if ((this.y - this.size) <= 0) {\r\n         this.velY = -(this.velY);\r\n      }\r\n\r\n      this.x += this.velX;\r\n      this.y += this.velY;\r\n   }\r\n\r\n   collisionDetect() {\r\n      for (const ball of balls) {\r\n         if (!(this === ball) && ball.exists) {\r\n            const dx = this.x - ball.x;\r\n            const dy = this.y - ball.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance < this.size + ball.size) {\r\n              ball.color = this.color = randomRGB();\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n}\r\n\r\nclass EvilCircle extends Shape{\r\n    \r\n    constructor(x,y){\r\n        super(x,y, 20, 20);\r\n        this.color='white';\r\n        this.size=10;\r\n        window.addEventListener('keydown', (e)=>{\r\n            switch(e.key){\r\n                case 'a':\r\n                    this.x -= this.velX;\r\n                    break;\r\n                    case 'a':\r\n                    this.x -= this.velX;\r\n                    break;\r\n                    case 'd':\r\n                    this.x += this.velX;\r\n                    break;\r\n                    case 'w':\r\n                    this.y -= this.velY;\r\n                    break;\r\n                    case 's':\r\n                    this.y += this.velY;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    draw(){\r\n        ctx.beginPath();\r\n        ctx.lineWidth=3;\r\n        ctx.strokeStyle = 'white';\r\n        ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n    }\r\n\r\n    checkBounds(){\r\n        if ((this.x + this.size) >= width) {\r\n            this.x = -(this.size);\r\n         }\r\n   \r\n         if ((this.x - this.size) <= 0) {\r\n            this.x = -(this.size);\r\n         }\r\n   \r\n         if ((this.y + this.size) >= height) {\r\n            this.y = -(this.size);\r\n         }\r\n   \r\n         if ((this.y - this.size) <= 0) {\r\n            this.y= -(this.size);\r\n         }\r\n    }\r\n\r\n    collisionDetect(){\r\n        for (const ball of balls) {\r\n            if (ball.exists) {\r\n               const dx = this.x - ball.x;\r\n               const dy = this.y - ball.y;\r\n               const distance = Math.sqrt(dx * dx + dy * dy);\r\n   \r\n               if (distance < this.size + ball.size) {\r\n                 ball.exists=false;\r\n                 count--;\r\n                 para.textContent = 'Ball Count: ' + count;\r\n               }\r\n            }\r\n         }\r\n    }\r\n    \r\n}\r\n\r\nconst balls = [];\r\n\r\n\r\nwhile (balls.length < 25) {\r\n   const size = random(10,20);\r\n   const ball = new Ball(\r\n      random(0 + size,width - size),\r\n      random(0 + size,height - size),\r\n      random(-7,7),\r\n      random(-7,7),\r\n      randomRGB(),\r\n      size\r\n   );\r\n\r\n  balls.push(ball);\r\n  count++;\r\n  para.textContent = 'Ball Count: ' + count;\r\n}\r\n\r\nconst evilcircle = new EvilCircle(random(0 + 10,width-10), random(0 + 10,height-10));\r\n\r\nfunction loop() {\r\n   ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';\r\n   ctx.fillRect(0, 0,  width, height);\r\n   \r\n   for (const ball of balls) {\r\n       if(ball.exists){\r\n            ball.draw();\r\n            ball.update();\r\n            ball.collisionDetect();\r\n       }\r\n\r\n       evilcircle.draw();\r\n       evilcircle.checkBounds();\r\n       evilcircle.collisionDetect();\r\n   }\r\n   requestAnimationFrame(loop);\r\n}\r\n\r\nloop();\r\n"]}